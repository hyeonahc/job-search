{"ast":null,"code":"var _jsxFileName = \"/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/DashboardContext.jsx\",\n    _s = $RefreshSig$();\n\nimport './Dashboard.scss'; // import MOCK_DATA from '../data/MOCK_DATA.json';\n\nimport React, { useState, useMemo, useEffect, useContext } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport axios from 'axios';\nimport JobPostContext from '../context/job-post-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DashboardContext = () => {\n  _s();\n\n  const {\n    state\n  } = useContext(JobPostContext);\n  console.log(state);\n  const Columns = [{\n    Header: '제목',\n    accessor: 'state.title'\n  }, {\n    Header: '회사이름',\n    accessor: 'state.companyName'\n  }, {\n    Header: '설립일',\n    accessor: 'state.foundingDate'\n  }, {\n    Header: '매출액',\n    accessor: 'state.revenue'\n  }, {\n    Header: '회사사원수',\n    accessor: 'state.employee'\n  }]; // const [jobs, setJobs] = useState([]);\n  // newsapi를 사용해서 만든 예전 코드\n  // const tableData =apiKey=493d2c43063547bb8cd4e80316432f85';\n  // useEffect(() => {\n  //   axios.get(tableData).then(response => {\n  //     console.log(response.data.articles);\n  //     setJobs(response.data.articles);\n  //   });\n  // }, []);\n  // 테이블에 초기 데이터를 가져올 백엔드 주소: localhost:8080\n  // 접근할때는 루트 폴더 경로로 접근: /\n  // const tableData = '/MOCK_DATA.json';\n  // console.log(tableData.contents);\n  // console.log(tableData.contents)에서 값이 받아와지는데 axios를 사용하면 값이 받아와지지 않고 에러가 뜬다\n  // try 구문은 실행되지 않고 catch에서 에러메세지만 보여줌\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     try {\n  //       const response = await axios.get(tableData);\n  //       console.log(response.data);\n  //       setJobs(response.data.contents);\n  //     } catch (e) {\n  //       console.error(e);\n  //     }\n  //   };\n  //   fetchData();\n  // }, []);\n  // !! useEffect 함수의 두번째 파라미터 배열에 어떤 값을 넣어주어야할지 공부\n  //   'https://newsapi.org/v2/top-headlines?country=kr&\n  // const columns = useMemo(() => Columns, []);\n  // const tableInstance = useTable(\n  //   {\n  //     columns: columns,\n  //     data: state,\n  //   },\n  //   usePagination\n  // );\n  // const {\n  //   getTableProps,\n  //   getTableBodyProps,\n  //   headerGroups,\n  //   page,\n  //   nextPage,\n  //   previousPage,\n  //   prepareRow,\n  //   canPreviousPage,\n  //   canNextPage,\n  // } = tableInstance;\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: state.posts.length ? state.posts.map(post => post.title) : '로딩중'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DashboardContext, \"1KanyRZ80sTgEeQF1ogKen7i0wM=\");\n\n_c = DashboardContext;\nexport default DashboardContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardContext\");","map":{"version":3,"sources":["/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/DashboardContext.jsx"],"names":["React","useState","useMemo","useEffect","useContext","useTable","usePagination","axios","JobPostContext","DashboardContext","state","console","log","Columns","Header","accessor","posts","length","map","post","title"],"mappings":";;;AAAA,OAAO,kBAAP,C,CACA;;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,SAAnC,EAA8CC,UAA9C,QAAgE,OAAhE;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,aAAxC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAAA;;AAC7B,QAAM;AAAEC,IAAAA;AAAF,MAAYN,UAAU,CAACI,cAAD,CAA5B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,QAAMG,OAAO,GAAG,CACd;AACEC,IAAAA,MAAM,EAAE,IADV;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GADc,EAKd;AACED,IAAAA,MAAM,EAAE,MADV;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GALc,EASd;AACED,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GATc,EAad;AACED,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GAbc,EAiBd;AACED,IAAAA,MAAM,EAAE,OADV;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GAjBc,CAAhB,CAJ6B,CA2B7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,cACGL,KAAK,CAACM,KAAN,CAAYC,MAAZ,GAAqBP,KAAK,CAACM,KAAN,CAAYE,GAAZ,CAAgBC,IAAI,IAAIA,IAAI,CAACC,KAA7B,CAArB,GAA2D;AAD9D;AAAA;AAAA;AAAA;AAAA,UADF;AA4CD,CA7HD;;GAAMX,gB;;KAAAA,gB;AA+HN,eAAeA,gBAAf","sourcesContent":["import './Dashboard.scss';\r\n// import MOCK_DATA from '../data/MOCK_DATA.json';\r\nimport React, { useState, useMemo, useEffect, useContext } from 'react';\r\nimport { useTable, usePagination } from 'react-table';\r\nimport axios from 'axios';\r\nimport JobPostContext from '../context/job-post-context';\r\n\r\nconst DashboardContext = () => {\r\n  const { state } = useContext(JobPostContext);\r\n  console.log(state);\r\n\r\n  const Columns = [\r\n    {\r\n      Header: '제목',\r\n      accessor: 'state.title',\r\n    },\r\n    {\r\n      Header: '회사이름',\r\n      accessor: 'state.companyName',\r\n    },\r\n    {\r\n      Header: '설립일',\r\n      accessor: 'state.foundingDate',\r\n    },\r\n    {\r\n      Header: '매출액',\r\n      accessor: 'state.revenue',\r\n    },\r\n    {\r\n      Header: '회사사원수',\r\n      accessor: 'state.employee',\r\n    },\r\n  ];\r\n\r\n  // const [jobs, setJobs] = useState([]);\r\n\r\n  // newsapi를 사용해서 만든 예전 코드\r\n  // const tableData =apiKey=493d2c43063547bb8cd4e80316432f85';\r\n  // useEffect(() => {\r\n  //   axios.get(tableData).then(response => {\r\n  //     console.log(response.data.articles);\r\n  //     setJobs(response.data.articles);\r\n  //   });\r\n  // }, []);\r\n\r\n  // 테이블에 초기 데이터를 가져올 백엔드 주소: localhost:8080\r\n  // 접근할때는 루트 폴더 경로로 접근: /\r\n  // const tableData = '/MOCK_DATA.json';\r\n  // console.log(tableData.contents);\r\n  // console.log(tableData.contents)에서 값이 받아와지는데 axios를 사용하면 값이 받아와지지 않고 에러가 뜬다\r\n  // try 구문은 실행되지 않고 catch에서 에러메세지만 보여줌\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(tableData);\r\n  //       console.log(response.data);\r\n  //       setJobs(response.data.contents);\r\n  //     } catch (e) {\r\n  //       console.error(e);\r\n  //     }\r\n  //   };\r\n  //   fetchData();\r\n  // }, []);\r\n  // !! useEffect 함수의 두번째 파라미터 배열에 어떤 값을 넣어주어야할지 공부\r\n  //   'https://newsapi.org/v2/top-headlines?country=kr&\r\n\r\n  // const columns = useMemo(() => Columns, []);\r\n\r\n  // const tableInstance = useTable(\r\n  //   {\r\n  //     columns: columns,\r\n  //     data: state,\r\n  //   },\r\n  //   usePagination\r\n  // );\r\n\r\n  // const {\r\n  //   getTableProps,\r\n  //   getTableBodyProps,\r\n  //   headerGroups,\r\n  //   page,\r\n  //   nextPage,\r\n  //   previousPage,\r\n  //   prepareRow,\r\n  //   canPreviousPage,\r\n  //   canNextPage,\r\n  // } = tableInstance;\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      {state.posts.length ? state.posts.map(post => post.title) : '로딩중'}\r\n      {/* <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map(row => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    // <a\r\n                    //   href=\"https://dict.naver.com/\"\r\n                    //   target=\"_blank\"\r\n                    //   rel=\"noreferrer\"\r\n                    // >\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                    // </a>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div>\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          Previous\r\n        </button>\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          Next\r\n        </button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardContext;\r\n"]},"metadata":{},"sourceType":"module"}