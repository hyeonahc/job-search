{"ast":null,"code":"var _jsxFileName = \"/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/DashboardContext.jsx\",\n    _s = $RefreshSig$();\n\nimport './Dashboard.scss';\nimport MOCK_DATA from '../data/MOCK_DATA.json';\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport axios from 'axios';\nimport { JobPostConsumer } from '../context/job-post-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Columns = [{\n  Header: '제목',\n  accessor: 'title'\n}, {\n  Header: '회사이름',\n  accessor: 'companyName'\n}, {\n  Header: '설립일',\n  accessor: 'foundingDate'\n}, {\n  Header: '매출액',\n  accessor: 'revenue'\n}, {\n  Header: '회사사원수',\n  accessor: 'employee'\n}];\n\nconst DashboardContext = () => {\n  _s();\n\n  const [jobs, setJobs] = useState([]); // console.log(MOCK_DATA);\n  // 테이블에 초기 데이터를 가져올 백엔드 주소: localhost:8080\n\n  const tableData = MOCK_DATA; // MOCK_DATA;\n  // 가짜 JSON: news api\n  // 'https://newsapi.org/v2/top-headlines?country=kr&apiKey=493d2c43063547bb8cd4e80316432f85';\n\n  useEffect(() => {\n    axios.get(tableData).then(response => {\n      console.log(response);\n      setJobs(response.data);\n    });\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get(tableData);\n        setJobs(response.data);\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    fetchData();\n  }, []); // !! useEffect 함수의 두번째 파라미터 배열에 어떤 값을 넣어주어야할지 공부\n  // setJobs(tableData);\n\n  const columns = useMemo(() => Columns, []);\n  const tableInstance = useTable({\n    columns: columns,\n    data: jobs // data: tableData,\n\n  }, usePagination);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    nextPage,\n    previousPage,\n    prepareRow,\n    canPreviousPage,\n    canNextPage\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(JobPostConsumer, {\n    children: value => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dashboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n              children: column.render('Header')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: page.map(row => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  children: cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 25\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => previousPage(),\n          disabled: !canPreviousPage,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => nextPage(),\n          disabled: !canNextPage,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DashboardContext, \"ebSqz1TY8vo/95wgeiBhCGkTmpw=\", false, function () {\n  return [useTable];\n});\n\n_c = DashboardContext;\nexport default DashboardContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardContext\");","map":{"version":3,"sources":["/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/DashboardContext.jsx"],"names":["MOCK_DATA","React","useState","useMemo","useEffect","useTable","usePagination","axios","JobPostConsumer","Columns","Header","accessor","DashboardContext","jobs","setJobs","tableData","get","then","response","console","log","data","fetchData","e","error","columns","tableInstance","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","prepareRow","canPreviousPage","canNextPage","value","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import './Dashboard.scss';\r\nimport MOCK_DATA from '../data/MOCK_DATA.json';\r\nimport React, { useState, useMemo, useEffect } from 'react';\r\nimport { useTable, usePagination } from 'react-table';\r\nimport axios from 'axios';\r\nimport { JobPostConsumer } from '../context/job-post-context';\r\n\r\nconst Columns = [\r\n  {\r\n    Header: '제목',\r\n    accessor: 'title',\r\n  },\r\n  {\r\n    Header: '회사이름',\r\n    accessor: 'companyName',\r\n  },\r\n  {\r\n    Header: '설립일',\r\n    accessor: 'foundingDate',\r\n  },\r\n  {\r\n    Header: '매출액',\r\n    accessor: 'revenue',\r\n  },\r\n  {\r\n    Header: '회사사원수',\r\n    accessor: 'employee',\r\n  },\r\n];\r\n\r\nconst DashboardContext = () => {\r\n  const [jobs, setJobs] = useState([]);\r\n\r\n  // console.log(MOCK_DATA);\r\n\r\n  // 테이블에 초기 데이터를 가져올 백엔드 주소: localhost:8080\r\n  const tableData = MOCK_DATA;\r\n  // MOCK_DATA;\r\n  // 가짜 JSON: news api\r\n  // 'https://newsapi.org/v2/top-headlines?country=kr&apiKey=493d2c43063547bb8cd4e80316432f85';\r\n  useEffect(() => {\r\n    axios.get(tableData).then(response => {\r\n      console.log(response);\r\n      setJobs(response.data);\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const response = await axios.get(tableData);\r\n        setJobs(response.data);\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, []);\r\n\r\n  // !! useEffect 함수의 두번째 파라미터 배열에 어떤 값을 넣어주어야할지 공부\r\n\r\n  // setJobs(tableData);\r\n\r\n  const columns = useMemo(() => Columns, []);\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns: columns,\r\n      data: jobs,\r\n      // data: tableData,\r\n    },\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    prepareRow,\r\n    canPreviousPage,\r\n    canNextPage,\r\n  } = tableInstance;\r\n\r\n  return (\r\n    <JobPostConsumer>\r\n      {value => (\r\n        <div className=\"dashboard\">\r\n          <table {...getTableProps()}>\r\n            <thead>\r\n              {headerGroups.map(headerGroup => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map(column => (\r\n                    <th {...column.getHeaderProps()}>\r\n                      {column.render('Header')}\r\n                    </th>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {page.map(row => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map(cell => {\r\n                      return (\r\n                        <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          <div>\r\n            <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n              Previous\r\n            </button>\r\n            <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </JobPostConsumer>\r\n  );\r\n};\r\n\r\nexport default DashboardContext;\r\n"]},"metadata":{},"sourceType":"module"}