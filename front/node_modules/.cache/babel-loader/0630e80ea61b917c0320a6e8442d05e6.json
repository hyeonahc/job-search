{"ast":null,"code":"var _jsxFileName = \"/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/DashboardContext.jsx\",\n    _s = $RefreshSig$();\n\nimport './Dashboard.scss'; // import MOCK_DATA from '../data/MOCK_DATA.json';\n\nimport React, { useState, useMemo, useEffect, useContext } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport axios from 'axios';\nimport JobPostContext from '../context/job-post-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Columns = [{\n  Header: '제목',\n  accessor: 'title'\n}, {\n  Header: '회사이름',\n  accessor: 'companyName'\n}, {\n  Header: '설립일',\n  accessor: 'foundingDate'\n}, {\n  Header: '매출액',\n  accessor: 'revenue'\n}, {\n  Header: '회사사원수',\n  accessor: 'employee'\n}];\n\nconst DashboardContext = () => {\n  _s();\n\n  // const [jobs, setJobs] = useState([]);\n  // newsapi를 사용해서 만든 예전 코드\n  // const tableData =\n  //   'https://newsapi.org/v2/top-headlines?country=kr&apiKey=493d2c43063547bb8cd4e80316432f85';\n  // useEffect(() => {\n  //   axios.get(tableData).then(response => {\n  //     console.log(response.data.articles);\n  //     setJobs(response.data.articles);\n  //   });\n  // }, []);\n  // 테이블에 초기 데이터를 가져올 백엔드 주소: localhost:8080\n  // 접근할때는 루트 폴더 경로로 접근: /\n  // const tableData = '/MOCK_DATA.json';\n  // console.log(tableData.contents);\n  // console.log(tableData.contents)에서 값이 받아와지는데 axios를 사용하면 값이 받아와지지 않고 에러가 뜬다\n  // try 구문은 실행되지 않고 catch에서 에러메세지만 보여줌\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     try {\n  //       const response = await axios.get(tableData);\n  //       console.log(response.data);\n  //       setJobs(response.data.contents);\n  //     } catch (e) {\n  //       console.error(e);\n  //     }\n  //   };\n  //   fetchData();\n  // }, []);\n  // !! useEffect 함수의 두번째 파라미터 배열에 어떤 값을 넣어주어야할지 공부\n  const columns = useMemo(() => Columns, []);\n  const tableInstance = useTable({\n    columns: columns // data: jobs,\n\n  }, usePagination);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    nextPage,\n    previousPage,\n    prepareRow,\n    canPreviousPage,\n    canNextPage\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: column.render('Header')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: page.map(row => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return (\n                /*#__PURE__*/\n                // <a\n                //   href=\"https://dict.naver.com/\"\n                //   target=\"_blank\"\n                //   rel=\"noreferrer\"\n                // >\n                _jsxDEV(\"td\", { ...cell.getCellProps(),\n                  children: cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 21\n                }, this) // </a>\n\n              );\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => previousPage(),\n        disabled: !canPreviousPage,\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => nextPage(),\n        disabled: !canNextPage,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DashboardContext, \"hgXHdILXnn80K6cH/otfF3TgJlE=\", false, function () {\n  return [useTable];\n});\n\n_c = DashboardContext;\nexport default DashboardContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardContext\");","map":{"version":3,"sources":["/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/DashboardContext.jsx"],"names":["React","useState","useMemo","useEffect","useContext","useTable","usePagination","axios","JobPostContext","Columns","Header","accessor","DashboardContext","columns","tableInstance","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","prepareRow","canPreviousPage","canNextPage","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps"],"mappings":"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","sourcesContent":["import './Dashboard.scss';\r\n// import MOCK_DATA from '../data/MOCK_DATA.json';\r\nimport React, { useState, useMemo, useEffect, useContext } from 'react';\r\nimport { useTable, usePagination } from 'react-table';\r\nimport axios from 'axios';\r\nimport JobPostContext from '../context/job-post-context';\r\n\r\nconst Columns = [\r\n  {\r\n    Header: '제목',\r\n    accessor: 'title',\r\n  },\r\n  {\r\n    Header: '회사이름',\r\n    accessor: 'companyName',\r\n  },\r\n  {\r\n    Header: '설립일',\r\n    accessor: 'foundingDate',\r\n  },\r\n  {\r\n    Header: '매출액',\r\n    accessor: 'revenue',\r\n  },\r\n  {\r\n    Header: '회사사원수',\r\n    accessor: 'employee',\r\n  },\r\n];\r\n\r\nconst DashboardContext = () => {\r\n  // const [jobs, setJobs] = useState([]);\r\n\r\n  // newsapi를 사용해서 만든 예전 코드\r\n  // const tableData =\r\n  //   'https://newsapi.org/v2/top-headlines?country=kr&apiKey=493d2c43063547bb8cd4e80316432f85';\r\n  // useEffect(() => {\r\n  //   axios.get(tableData).then(response => {\r\n  //     console.log(response.data.articles);\r\n  //     setJobs(response.data.articles);\r\n  //   });\r\n  // }, []);\r\n\r\n  // 테이블에 초기 데이터를 가져올 백엔드 주소: localhost:8080\r\n  // 접근할때는 루트 폴더 경로로 접근: /\r\n  // const tableData = '/MOCK_DATA.json';\r\n  // console.log(tableData.contents);\r\n  // console.log(tableData.contents)에서 값이 받아와지는데 axios를 사용하면 값이 받아와지지 않고 에러가 뜬다\r\n  // try 구문은 실행되지 않고 catch에서 에러메세지만 보여줌\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(tableData);\r\n  //       console.log(response.data);\r\n  //       setJobs(response.data.contents);\r\n  //     } catch (e) {\r\n  //       console.error(e);\r\n  //     }\r\n  //   };\r\n  //   fetchData();\r\n  // }, []);\r\n  // !! useEffect 함수의 두번째 파라미터 배열에 어떤 값을 넣어주어야할지 공부\r\n\r\n  const columns = useMemo(() => Columns, []);\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns: columns,\r\n      // data: jobs,\r\n    },\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    prepareRow,\r\n    canPreviousPage,\r\n    canNextPage,\r\n  } = tableInstance;\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      <table {...getTableProps()}>\r\n        <thead>\r\n          {headerGroups.map(headerGroup => (\r\n            <tr {...headerGroup.getHeaderGroupProps()}>\r\n              {headerGroup.headers.map(column => (\r\n                <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n              ))}\r\n            </tr>\r\n          ))}\r\n        </thead>\r\n        <tbody {...getTableBodyProps()}>\r\n          {page.map(row => {\r\n            prepareRow(row);\r\n            return (\r\n              <tr {...row.getRowProps()}>\r\n                {row.cells.map(cell => {\r\n                  return (\r\n                    // <a\r\n                    //   href=\"https://dict.naver.com/\"\r\n                    //   target=\"_blank\"\r\n                    //   rel=\"noreferrer\"\r\n                    // >\r\n                    <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                    // </a>\r\n                  );\r\n                })}\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n      <div>\r\n        <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n          Previous\r\n        </button>\r\n        <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n          Next\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardContext;\r\n"]},"metadata":{},"sourceType":"module"}