[{"/Users/hyeonah/Documents/GitHub/job-search/front/src/index.js":"1","/Users/hyeonah/Documents/GitHub/job-search/front/src/App.jsx":"2","/Users/hyeonah/Documents/GitHub/job-search/front/src/context/job-post-context.js":"3","/Users/hyeonah/Documents/GitHub/job-search/front/src/components/Dashboard.jsx":"4","/Users/hyeonah/Documents/GitHub/job-search/front/src/components/Filter.jsx":"5"},{"size":230,"mtime":1643596552684,"results":"6","hashOfConfig":"7"},{"size":374,"mtime":1643596552677,"results":"8","hashOfConfig":"7"},{"size":1013,"mtime":1644123535028,"results":"9","hashOfConfig":"7"},{"size":4175,"mtime":1644116784311,"results":"10","hashOfConfig":"7"},{"size":4780,"mtime":1644112297201,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"mmlqpi",{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"/Users/hyeonah/Documents/GitHub/job-search/front/src/index.js",[],"/Users/hyeonah/Documents/GitHub/job-search/front/src/App.jsx",[],"/Users/hyeonah/Documents/GitHub/job-search/front/src/context/job-post-context.js",[],"/Users/hyeonah/Documents/GitHub/job-search/front/src/components/Dashboard.jsx",["24"],"import './Dashboard.scss';\r\nimport React, { useMemo, useContext } from 'react';\r\nimport { useTable, usePagination } from 'react-table';\r\nimport JobPostContext from '../context/job-post-context';\r\n\r\nconst DashboardContext = () => {\r\n  const { state } = useContext(JobPostContext);\r\n\r\n  const Columns = [\r\n    {\r\n      Header: '제목',\r\n      accessor: 'title',\r\n    },\r\n    {\r\n      Header: '회사이름',\r\n      accessor: 'companyName',\r\n    },\r\n    {\r\n      Header: '설립일',\r\n      accessor: 'foundingDate',\r\n    },\r\n    {\r\n      Header: '매출액',\r\n      accessor: 'revenue',\r\n    },\r\n    {\r\n      Header: '회사사원수',\r\n      accessor: 'employee',\r\n    },\r\n  ];\r\n\r\n  const columns = useMemo(() => Columns, []);\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns: columns,\r\n      data: state.posts,\r\n    },\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    prepareRow,\r\n    canPreviousPage,\r\n    canNextPage,\r\n  } = tableInstance;\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      {state.posts.length ? (\r\n        <>\r\n          <table {...getTableProps()}>\r\n            <thead>\r\n              {headerGroups.map(headerGroup => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map(column => (\r\n                    <th {...column.getHeaderProps()}>\r\n                      {column.render('Header')}\r\n                    </th>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {page.map((row, rowIndex) => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map((cell, cellIndex) => {\r\n                      console.log(cell, cellIndex);\r\n                      // if (cellIndex === 3 && cell.value !== undefined) {\r\n                      //   console.log(cell.value / 100000000 + '억');\r\n                      //   // cell.values.revenue = '';\r\n                      // }\r\n                      return (\r\n                        <td {...cell.getCellProps()}>\r\n                          {/* {cellIndex === 3 && cell.value !== undefined\r\n                            ? (cell.value = cell.value / 100000000 + '억')\r\n                            : (cell.value = undefined)} */}\r\n\r\n                          {cellIndex === 3 && cell.value !== undefined\r\n                            ? (cell.value = cell.value / 100000000 + '억')\r\n                            : (cell.value = undefined)}\r\n\r\n                          {/* {(cell.row.values.revenue = '')} */}\r\n\r\n                          {/* {cellIndex === 3\r\n                            ? ((cell.row.original.revenue =\r\n                                'cell.row.original.revenue '),\r\n                              (cell.row.values.revenue =\r\n                                'cell.row.values.revenue '),\r\n                              (cell.value = 'cell.value '))\r\n                            : console.log(false)} */}\r\n\r\n                          {cellIndex ? (\r\n                            cell.render('Cell')\r\n                          ) : (\r\n                            <a\r\n                              href={state.posts[rowIndex].url}\r\n                              target=\"_blank\"\r\n                              rel=\"noreferrer\"\r\n                            >\r\n                              {cell.render('Cell')}\r\n                            </a>\r\n                          )}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          <div>\r\n            <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n              Previous\r\n            </button>\r\n            <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        '로딩중'\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardContext;\r\n","/Users/hyeonah/Documents/GitHub/job-search/front/src/components/Filter.jsx",[],["25","26"],{"ruleId":"27","severity":1,"message":"28","line":32,"column":42,"nodeType":"29","endLine":32,"endColumn":44,"suggestions":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},"react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'Columns'. Either include it or remove the dependency array.","ArrayExpression",["35"],"no-native-reassign",["36"],"no-negated-in-lhs",["37"],{"desc":"38","fix":"39"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [Columns]",{"range":"40","text":"41"},[688,690],"[Columns]"]