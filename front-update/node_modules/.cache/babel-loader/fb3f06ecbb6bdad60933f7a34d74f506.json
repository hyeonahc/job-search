{"ast":null,"code":"var _jsxFileName = \"/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/DashboardContext.jsx\",\n    _s = $RefreshSig$();\n\nimport './Dashboard.scss'; // import MOCK_DATA from '../data/MOCK_DATA.json';\n\nimport React, { useState, useMemo, useEffect, useContext } from 'react';\nimport { useTable, usePagination } from 'react-table';\nimport axios from 'axios';\nimport JobPostContext from '../context/job-post-context';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst DashboardContext = () => {\n  _s();\n\n  const {\n    state\n  } = useContext(JobPostContext);\n  console.log(state);\n  const Columns = [{\n    Header: '제목',\n    accessor: 'title'\n  }, {\n    Header: '회사이름',\n    accessor: 'companyName'\n  }, {\n    Header: '설립일',\n    accessor: 'foundingDate'\n  }, {\n    Header: '매출액',\n    accessor: 'revenue'\n  }, {\n    Header: '회사사원수',\n    accessor: 'employee'\n  }]; // const [jobs, setJobs] = useState([]);\n  // newsapi를 사용해서 만든 예전 코드\n  // const tableData =apiKey=493d2c43063547bb8cd4e80316432f85';\n  // useEffect(() => {\n  //   axios.get(tableData).then(response => {\n  //     console.log(response.data.articles);\n  //     setJobs(response.data.articles);\n  //   });\n  // }, []);\n  // 테이블에 초기 데이터를 가져올 백엔드 주소: localhost:8080\n  // 접근할때는 루트 폴더 경로로 접근: /\n  // const tableData = '/MOCK_DATA.json';\n  // console.log(tableData.contents);\n  // console.log(tableData.contents)에서 값이 받아와지는데 axios를 사용하면 값이 받아와지지 않고 에러가 뜬다\n  // try 구문은 실행되지 않고 catch에서 에러메세지만 보여줌\n  // useEffect(() => {\n  //   const fetchData = async () => {\n  //     try {\n  //       const response = await axios.get(tableData);\n  //       console.log(response.data);\n  //       setJobs(response.data.contents);\n  //     } catch (e) {\n  //       console.error(e);\n  //     }\n  //   };\n  //   fetchData();\n  // }, []);\n  // !! useEffect 함수의 두번째 파라미터 배열에 어떤 값을 넣어주어야할지 공부\n  //   'https://newsapi.org/v2/top-headlines?country=kr&\n\n  const columns = useMemo(() => Columns, []);\n  const tableInstance = useTable({\n    columns: columns,\n    data: state.posts\n  }, usePagination);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    page,\n    nextPage,\n    previousPage,\n    prepareRow,\n    canPreviousPage,\n    canNextPage\n  } = tableInstance;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: state.posts.length ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n              children: column.render('Header')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: page.map(row => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                console.log(cell);\n                let test;\n\n                if (cell.column.Header === '제목') {\n                  test = /*#__PURE__*/_jsxDEV(\"a\", {\n                    href: \"https://dict.naver.com/\",\n                    target: \"_blank\",\n                    rel: \"noreferrer\",\n                    children: cell.render('Cell')\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 115,\n                    columnNumber: 27\n                  }, this);\n                } else {\n                  test = cell.render('Cell');\n                } // let test = cell.row.values.companyName ? (\n                //   <a>cell.render('Cell')</a>\n                // ) : (\n                //   cell.render('Cell')\n                // );\n\n\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  children: test\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 133,\n                  columnNumber: 30\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => previousPage(),\n          disabled: !canPreviousPage,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => nextPage(),\n          disabled: !canNextPage,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : '로딩중'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DashboardContext, \"fdbIqWsRlDOjyE6CyhffEfOgDI0=\", false, function () {\n  return [useTable];\n});\n\n_c = DashboardContext;\nexport default DashboardContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"DashboardContext\");","map":{"version":3,"sources":["/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/DashboardContext.jsx"],"names":["React","useState","useMemo","useEffect","useContext","useTable","usePagination","axios","JobPostContext","DashboardContext","state","console","log","Columns","Header","accessor","columns","tableInstance","data","posts","getTableProps","getTableBodyProps","headerGroups","page","nextPage","previousPage","prepareRow","canPreviousPage","canNextPage","length","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","test","getCellProps"],"mappings":"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","sourcesContent":["import './Dashboard.scss';\r\n// import MOCK_DATA from '../data/MOCK_DATA.json';\r\nimport React, { useState, useMemo, useEffect, useContext } from 'react';\r\nimport { useTable, usePagination } from 'react-table';\r\nimport axios from 'axios';\r\nimport JobPostContext from '../context/job-post-context';\r\n\r\nconst DashboardContext = () => {\r\n  const { state } = useContext(JobPostContext);\r\n  console.log(state);\r\n\r\n  const Columns = [\r\n    {\r\n      Header: '제목',\r\n      accessor: 'title',\r\n    },\r\n    {\r\n      Header: '회사이름',\r\n      accessor: 'companyName',\r\n    },\r\n    {\r\n      Header: '설립일',\r\n      accessor: 'foundingDate',\r\n    },\r\n    {\r\n      Header: '매출액',\r\n      accessor: 'revenue',\r\n    },\r\n    {\r\n      Header: '회사사원수',\r\n      accessor: 'employee',\r\n    },\r\n  ];\r\n\r\n  // const [jobs, setJobs] = useState([]);\r\n\r\n  // newsapi를 사용해서 만든 예전 코드\r\n  // const tableData =apiKey=493d2c43063547bb8cd4e80316432f85';\r\n  // useEffect(() => {\r\n  //   axios.get(tableData).then(response => {\r\n  //     console.log(response.data.articles);\r\n  //     setJobs(response.data.articles);\r\n  //   });\r\n  // }, []);\r\n\r\n  // 테이블에 초기 데이터를 가져올 백엔드 주소: localhost:8080\r\n  // 접근할때는 루트 폴더 경로로 접근: /\r\n  // const tableData = '/MOCK_DATA.json';\r\n  // console.log(tableData.contents);\r\n  // console.log(tableData.contents)에서 값이 받아와지는데 axios를 사용하면 값이 받아와지지 않고 에러가 뜬다\r\n  // try 구문은 실행되지 않고 catch에서 에러메세지만 보여줌\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(tableData);\r\n  //       console.log(response.data);\r\n  //       setJobs(response.data.contents);\r\n  //     } catch (e) {\r\n  //       console.error(e);\r\n  //     }\r\n  //   };\r\n  //   fetchData();\r\n  // }, []);\r\n  // !! useEffect 함수의 두번째 파라미터 배열에 어떤 값을 넣어주어야할지 공부\r\n  //   'https://newsapi.org/v2/top-headlines?country=kr&\r\n\r\n  const columns = useMemo(() => Columns, []);\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns: columns,\r\n      data: state.posts,\r\n    },\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    prepareRow,\r\n    canPreviousPage,\r\n    canNextPage,\r\n  } = tableInstance;\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      {state.posts.length ? (\r\n        <>\r\n          <table {...getTableProps()}>\r\n            <thead>\r\n              {headerGroups.map(headerGroup => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map(column => (\r\n                    <th {...column.getHeaderProps()}>\r\n                      {column.render('Header')}\r\n                    </th>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {page.map(row => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map(cell => {\r\n                      console.log(cell);\r\n                      let test;\r\n                      if (cell.column.Header === '제목') {\r\n                        test = (\r\n                          <a\r\n                            href=\"https://dict.naver.com/\"\r\n                            target=\"_blank\"\r\n                            rel=\"noreferrer\"\r\n                          >\r\n                            {cell.render('Cell')}\r\n                          </a>\r\n                        );\r\n                      } else {\r\n                        test = cell.render('Cell');\r\n                      }\r\n\r\n                      // let test = cell.row.values.companyName ? (\r\n                      //   <a>cell.render('Cell')</a>\r\n                      // ) : (\r\n                      //   cell.render('Cell')\r\n                      // );\r\n\r\n                      return <td {...cell.getCellProps()}>{test}</td>;\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          <div>\r\n            <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n              Previous\r\n            </button>\r\n            <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        '로딩중'\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardContext;\r\n"]},"metadata":{},"sourceType":"module"}