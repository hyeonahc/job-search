[{"/Users/hyeonah/Documents/GitHub/job-search/front-update/src/index.js":"1","/Users/hyeonah/Documents/GitHub/job-search/front-update/src/App.jsx":"2","/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/Dashboard.jsx":"3","/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/Filter.jsx":"4","/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/DashboardContext.jsx":"5","/Users/hyeonah/Documents/GitHub/job-search/front-update/src/context/job-post-context.js":"6"},{"size":230,"mtime":1642059836782,"results":"7","hashOfConfig":"8"},{"size":478,"mtime":1642816129224,"results":"9","hashOfConfig":"8"},{"size":2659,"mtime":1642805320506,"results":"10","hashOfConfig":"8"},{"size":3949,"mtime":1642667328552,"results":"11","hashOfConfig":"8"},{"size":5449,"mtime":1642820368142,"results":"12","hashOfConfig":"8"},{"size":1001,"mtime":1642899970356,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"18m2z9n",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/hyeonah/Documents/GitHub/job-search/front-update/src/index.js",[],["28","29"],"/Users/hyeonah/Documents/GitHub/job-search/front-update/src/App.jsx",[],"/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/Dashboard.jsx",[],"/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/Filter.jsx",[],"/Users/hyeonah/Documents/GitHub/job-search/front-update/src/components/DashboardContext.jsx",["30","31","32","33"],"import './Dashboard.scss';\r\n// import MOCK_DATA from '../data/MOCK_DATA.json';\r\nimport React, { useState, useMemo, useEffect, useContext } from 'react';\r\nimport { useTable, usePagination } from 'react-table';\r\nimport axios from 'axios';\r\nimport JobPostContext from '../context/job-post-context';\r\n\r\nconst DashboardContext = () => {\r\n  const { state } = useContext(JobPostContext);\r\n  console.log(state);\r\n\r\n  const Columns = [\r\n    {\r\n      Header: '제목',\r\n      accessor: 'title',\r\n    },\r\n    {\r\n      Header: '회사이름',\r\n      accessor: 'companyName',\r\n    },\r\n    {\r\n      Header: '설립일',\r\n      accessor: 'foundingDate',\r\n    },\r\n    {\r\n      Header: '매출액',\r\n      accessor: 'revenue',\r\n    },\r\n    {\r\n      Header: '회사사원수',\r\n      accessor: 'employee',\r\n    },\r\n  ];\r\n\r\n  // const [jobs, setJobs] = useState([]);\r\n\r\n  // newsapi를 사용해서 만든 예전 코드\r\n  // const tableData =apiKey=493d2c43063547bb8cd4e80316432f85';\r\n  // useEffect(() => {\r\n  //   axios.get(tableData).then(response => {\r\n  //     console.log(response.data.articles);\r\n  //     setJobs(response.data.articles);\r\n  //   });\r\n  // }, []);\r\n\r\n  // 테이블에 초기 데이터를 가져올 백엔드 주소: localhost:8080\r\n  // 접근할때는 루트 폴더 경로로 접근: /\r\n  // const tableData = '/MOCK_DATA.json';\r\n  // console.log(tableData.contents);\r\n  // console.log(tableData.contents)에서 값이 받아와지는데 axios를 사용하면 값이 받아와지지 않고 에러가 뜬다\r\n  // try 구문은 실행되지 않고 catch에서 에러메세지만 보여줌\r\n  // useEffect(() => {\r\n  //   const fetchData = async () => {\r\n  //     try {\r\n  //       const response = await axios.get(tableData);\r\n  //       console.log(response.data);\r\n  //       setJobs(response.data.contents);\r\n  //     } catch (e) {\r\n  //       console.error(e);\r\n  //     }\r\n  //   };\r\n  //   fetchData();\r\n  // }, []);\r\n  // !! useEffect 함수의 두번째 파라미터 배열에 어떤 값을 넣어주어야할지 공부\r\n  //   'https://newsapi.org/v2/top-headlines?country=kr&\r\n\r\n  const columns = useMemo(() => Columns, []);\r\n\r\n  const tableInstance = useTable(\r\n    {\r\n      columns: columns,\r\n      data: state.posts,\r\n    },\r\n    usePagination\r\n  );\r\n\r\n  const {\r\n    getTableProps,\r\n    getTableBodyProps,\r\n    headerGroups,\r\n    page,\r\n    nextPage,\r\n    previousPage,\r\n    prepareRow,\r\n    canPreviousPage,\r\n    canNextPage,\r\n  } = tableInstance;\r\n\r\n  return (\r\n    <div className=\"dashboard\">\r\n      {state.posts.length ? (\r\n        <>\r\n          <table {...getTableProps()}>\r\n            <thead>\r\n              {headerGroups.map(headerGroup => (\r\n                <tr {...headerGroup.getHeaderGroupProps()}>\r\n                  {headerGroup.headers.map(column => (\r\n                    <th {...column.getHeaderProps()}>\r\n                      {column.render('Header')}\r\n                    </th>\r\n                  ))}\r\n                </tr>\r\n              ))}\r\n            </thead>\r\n            <tbody {...getTableBodyProps()}>\r\n              {page.map(row => {\r\n                prepareRow(row);\r\n                return (\r\n                  <tr {...row.getRowProps()}>\r\n                    {row.cells.map((cell, index) => {\r\n                      console.log(cell);\r\n\r\n                      // let test;\r\n                      // if (index === 0) {\r\n                      //   test = (\r\n                      //     <a\r\n                      //       href=\"https://dict.naver.com/\"\r\n                      //       target=\"_blank\"\r\n                      //       rel=\"noreferrer\"\r\n                      //     >\r\n                      //       {cell.render('Cell')}\r\n                      //     </a>\r\n                      //   );\r\n                      // } else {\r\n                      //   test = cell.render('Cell');\r\n                      // }\r\n\r\n                      // const test = index ? (\r\n                      //   cell.render('Cell')\r\n                      // ) : (\r\n                      //   <a\r\n                      //     href=\"https://dict.naver.com/\"\r\n                      //     target=\"_blank\"\r\n                      //     rel=\"noreferrer\"\r\n                      //   >\r\n                      //     {cell.render('Cell')}\r\n                      //   </a>\r\n                      // );\r\n\r\n                      return (\r\n                        <td {...cell.getCellProps()}>\r\n                          {index ? (\r\n                            cell.render('Cell')\r\n                          ) : (\r\n                            <a\r\n                              href={state.url}\r\n                              target=\"_blank\"\r\n                              rel=\"noreferrer\"\r\n                            >\r\n                              {cell.render('Cell')}\r\n                            </a>\r\n                          )}\r\n                        </td>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n          <div>\r\n            <button onClick={() => previousPage()} disabled={!canPreviousPage}>\r\n              Previous\r\n            </button>\r\n            <button onClick={() => nextPage()} disabled={!canNextPage}>\r\n              Next\r\n            </button>\r\n          </div>\r\n        </>\r\n      ) : (\r\n        '로딩중'\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardContext;\r\n","/Users/hyeonah/Documents/GitHub/job-search/front-update/src/context/job-post-context.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":3,"column":17,"nodeType":"40","messageId":"41","endLine":3,"endColumn":25},{"ruleId":"38","severity":1,"message":"42","line":3,"column":36,"nodeType":"40","messageId":"41","endLine":3,"endColumn":45},{"ruleId":"38","severity":1,"message":"43","line":5,"column":8,"nodeType":"40","messageId":"41","endLine":5,"endColumn":13},{"ruleId":"44","severity":1,"message":"45","line":67,"column":42,"nodeType":"46","endLine":67,"endColumn":44,"suggestions":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'axios' is defined but never used.","react-hooks/exhaustive-deps","React Hook useMemo has a missing dependency: 'Columns'. Either include it or remove the dependency array.","ArrayExpression",["50"],"no-global-assign","no-unsafe-negation",{"desc":"51","fix":"52"},"Update the dependencies array to be: [Columns]",{"range":"53","text":"54"},[1867,1869],"[Columns]"]